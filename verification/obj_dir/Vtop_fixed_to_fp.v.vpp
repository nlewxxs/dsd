`begin_keywords "1800-2017"
`line 1 "verilog/fixed_to_fp.v" 1
module fixed_to_fp (
    input sign_i,
    input integer_i,
    input [18:0] fractional_i,
    output [31:0] fp_o
);
    
 

`line 10 "verilog/fixed_to_fp.v" 0
    reg [31:0] fp_reg;
    assign fp_o = fp_reg;

`line 13 "verilog/fixed_to_fp.v" 0
    always @(*) begin
        reg [7:0] exponent;
        reg [18:0] bitwise_or_array;  
         
        

`line 24 "verilog/fixed_to_fp.v" 0

`line 24 "verilog/fixed_to_fp.v" 0

`line 24 "verilog/fixed_to_fp.v" 0

`line 24 "verilog/fixed_to_fp.v" 0

`line 24 "verilog/fixed_to_fp.v" 0

`line 24 "verilog/fixed_to_fp.v" 0
 
        bitwise_or_array[18] = fractional_i[18];
        bitwise_or_array[17] = bitwise_or_array[18] | fractional_i[17];
        bitwise_or_array[16] = bitwise_or_array[17] | fractional_i[16];
        bitwise_or_array[15] = bitwise_or_array[16] | fractional_i[15];
        bitwise_or_array[14] = bitwise_or_array[15] | fractional_i[14];
        bitwise_or_array[13] = bitwise_or_array[14] | fractional_i[13];
        bitwise_or_array[12] = bitwise_or_array[13] | fractional_i[12];
        bitwise_or_array[11] = bitwise_or_array[12] | fractional_i[11];
        bitwise_or_array[10] = bitwise_or_array[11] | fractional_i[10];
        bitwise_or_array[9] = bitwise_or_array[10] | fractional_i[9];
        bitwise_or_array[8] = bitwise_or_array[9] | fractional_i[8];
        bitwise_or_array[7] = bitwise_or_array[8] | fractional_i[7];
        bitwise_or_array[6] = bitwise_or_array[7] | fractional_i[6];
        bitwise_or_array[5] = bitwise_or_array[6] | fractional_i[5];
        bitwise_or_array[4] = bitwise_or_array[5] | fractional_i[4];
        bitwise_or_array[3] = bitwise_or_array[4] | fractional_i[3];
        bitwise_or_array[2] = bitwise_or_array[3] | fractional_i[2];
        bitwise_or_array[1] = bitwise_or_array[2] | fractional_i[1];
        bitwise_or_array[0] = bitwise_or_array[1] | fractional_i[0];


`line 46 "verilog/fixed_to_fp.v" 0
         
        case(bitwise_or_array)
            19'b1111111111111111111: exponent = 8'b00000001;
            19'b0111111111111111111: exponent = 8'b00000010;
            19'b0011111111111111111: exponent = 8'b00000011;
            19'b0001111111111111111: exponent = 8'b00000100;
            19'b0000111111111111111: exponent = 8'b00000101;
            19'b0000011111111111111: exponent = 8'b00000110;
            19'b0000001111111111111: exponent = 8'b00000111;
            19'b0000000111111111111: exponent = 8'b00001000;
            19'b0000000011111111111: exponent = 8'b00001001;
            19'b0000000001111111111: exponent = 8'b00001010;
            19'b0000000000111111111: exponent = 8'b00001011;
            19'b0000000000011111111: exponent = 8'b00001100;
            19'b0000000000001111111: exponent = 8'b00001101;
            19'b0000000000000111111: exponent = 8'b00001110;
            19'b0000000000000011111: exponent = 8'b00001111;
            19'b0000000000000001111: exponent = 8'b00010000;
            19'b0000000000000000111: exponent = 8'b00010001;
            19'b0000000000000000011: exponent = 8'b00010010;
            19'b0000000000000000001: exponent = 8'b00010011;
            default: exponent = 8'b0;
        endcase

`line 70 "verilog/fixed_to_fp.v" 0
         
        if (integer_i) begin
             
            fp_reg = (sign_i == 1) ? 32'b00111111100000000000000000000000 : 32'b10111111100000000000000000000000;
        end else begin
             
            fp_reg = {sign_i, ~exponent + 8'b10000000, fractional_i << exponent, 4'b0};
        end
    end
endmodule

`line 81 "verilog/fixed_to_fp.v" 2
