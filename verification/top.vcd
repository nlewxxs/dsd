$version Generated by VerilatedVcd $end
$date Mon Mar 11 16:28:03 2024 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 * clk $end
  $var wire 32 , in [31:0] $end
  $var wire 32 - out [31:0] $end
  $var wire  1 + rst $end
  $scope module top $end
   $var wire  1 * clk $end
   $var wire 32 , in [31:0] $end
   $var wire 19 ' in_frac [18:0] $end
   $var wire  1 & in_int $end
   $var wire  1 . in_sign $end
   $var wire 32 - out [31:0] $end
   $var wire 19 3 out_frac [18:0] $end
   $var wire  1 2 out_int $end
   $var wire  1 2 out_sign $end
   $var wire  1 + rst $end
   $scope module cordic_block $end
    $var wire 32 5 N_ITERATIONS [31:0] $end
    $var wire 32 4 WORD_LENGTH [31:0] $end
    $var wire 357 6 alphas [356:0] $end
    $var wire  1 * clk $end
    $var wire 19 ' fractional_i [18:0] $end
    $var wire 19 3 fractional_o [18:0] $end
    $var wire  1 & integer_i $end
    $var wire  1 2 integer_o $end
    $var wire  1 + rst $end
    $var wire  1 . sign_i $end
    $var wire  1 2 sign_o $end
   $upscope $end
   $scope module fixed_to_floating $end
    $var wire 32 - fp_o [31:0] $end
    $var wire 32 # fp_reg [31:0] $end
    $var wire 19 3 fractional_i [18:0] $end
    $var wire  1 2 integer_i $end
    $var wire  1 2 sign_i $end
    $scope module unnamedblk1 $end
     $var wire 19 % bitwise_or_array [18:0] $end
     $var wire  8 $ exponent [7:0] $end
    $upscope $end
   $upscope $end
   $scope module floating_to_fixed $end
    $var wire  8 / exponent [7:0] $end
    $var wire 32 , fp_i [31:0] $end
    $var wire 19 ' fractional_o [18:0] $end
    $var wire  1 & integer_o $end
    $var wire  1 . sign_o $end
    $var wire 23 1 significand [22:0] $end
    $var wire  8 0 unbiased_exponent [7:0] $end
    $scope module unnamedblk1 $end
     $var wire 23 ) fractional_part [22:0] $end
     $var wire  1 ( integer_part $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00111111010010010011011011000000 #
b00000001 $
b1111111111111111111 %
0&
b0010000000000000000 '
0(
b00100000000000000000000 )
0*
0+
b00111110000000000000000000000000 ,
b00111111010010010011011011000000 -
0.
b01111100 /
b00000011 0
b00000000000000000000000 1
02
b1100100100110110110 3
b00000000000000000000000000010101 4
b00000000000000000000000000010001 5
b000000000000000000111000000000000000001111000000000000000011111000000000000000111111000000000000001111110000000000000011111100000000000000111111000000000000001111110000000000000011111100000000000000111111000000000000001111110111011000000011111011010100000000111110100101001000001111110011011111000011110011001111110000111111010000011010001100100100110110110 6
#1
b0001000000000000000 '
b00010000000000000000000 )
b00111101100000000000000000000000 ,
b01111011 /
b00000100 0
#2
b10111101100000000000000000000000 ,
1.
#3
b0000000000000000000 '
b00000000000000000000000 )
b00000000000000000000000000000000 ,
0.
b00000000 /
b01111111 0
#4
1&
1(
b00111111100000000000000000000000 ,
b01111111 /
b00000000 0
#5
b10111111100000000000000000000000 ,
1.
#6
0&
b0100101000111101011 '
0(
b01001010001111010111000 )
b00111110100101000111101011100001 ,
0.
b01111101 /
b00000010 0
b00101000111101011100001 1
#7
#8
#9
