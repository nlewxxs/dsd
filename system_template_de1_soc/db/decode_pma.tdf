--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=12 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:24:SJ cbx_lpm_add_sub 2020:06:05:12:04:24:SJ cbx_lpm_compare 2020:06:05:12:04:24:SJ cbx_lpm_decode 2020:06:05:12:04:24:SJ cbx_mgl 2020:06:05:13:25:21:SJ cbx_nadder 2020:06:05:12:04:24:SJ cbx_stratix 2020:06:05:12:04:24:SJ cbx_stratixii 2020:06:05:12:04:24:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_pma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[11..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[11..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3141w[1..0]	: WIRE;
	w_anode3150w[3..0]	: WIRE;
	w_anode3167w[3..0]	: WIRE;
	w_anode3177w[3..0]	: WIRE;
	w_anode3187w[3..0]	: WIRE;
	w_anode3197w[3..0]	: WIRE;
	w_anode3207w[3..0]	: WIRE;
	w_anode3217w[3..0]	: WIRE;
	w_anode3227w[3..0]	: WIRE;
	w_anode3239w[1..0]	: WIRE;
	w_anode3246w[3..0]	: WIRE;
	w_anode3257w[3..0]	: WIRE;
	w_anode3267w[3..0]	: WIRE;
	w_anode3277w[3..0]	: WIRE;
	w_anode3287w[3..0]	: WIRE;
	w_anode3297w[3..0]	: WIRE;
	w_anode3307w[3..0]	: WIRE;
	w_anode3317w[3..0]	: WIRE;
	w_data3139w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[11..0] = eq_wire[11..0];
	eq_wire[] = ( ( w_anode3317w[3..3], w_anode3307w[3..3], w_anode3297w[3..3], w_anode3287w[3..3], w_anode3277w[3..3], w_anode3267w[3..3], w_anode3257w[3..3], w_anode3246w[3..3]), ( w_anode3227w[3..3], w_anode3217w[3..3], w_anode3207w[3..3], w_anode3197w[3..3], w_anode3187w[3..3], w_anode3177w[3..3], w_anode3167w[3..3], w_anode3150w[3..3]));
	w_anode3141w[] = ( (w_anode3141w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3150w[] = ( (w_anode3150w[2..2] & (! w_data3139w[2..2])), (w_anode3150w[1..1] & (! w_data3139w[1..1])), (w_anode3150w[0..0] & (! w_data3139w[0..0])), w_anode3141w[1..1]);
	w_anode3167w[] = ( (w_anode3167w[2..2] & (! w_data3139w[2..2])), (w_anode3167w[1..1] & (! w_data3139w[1..1])), (w_anode3167w[0..0] & w_data3139w[0..0]), w_anode3141w[1..1]);
	w_anode3177w[] = ( (w_anode3177w[2..2] & (! w_data3139w[2..2])), (w_anode3177w[1..1] & w_data3139w[1..1]), (w_anode3177w[0..0] & (! w_data3139w[0..0])), w_anode3141w[1..1]);
	w_anode3187w[] = ( (w_anode3187w[2..2] & (! w_data3139w[2..2])), (w_anode3187w[1..1] & w_data3139w[1..1]), (w_anode3187w[0..0] & w_data3139w[0..0]), w_anode3141w[1..1]);
	w_anode3197w[] = ( (w_anode3197w[2..2] & w_data3139w[2..2]), (w_anode3197w[1..1] & (! w_data3139w[1..1])), (w_anode3197w[0..0] & (! w_data3139w[0..0])), w_anode3141w[1..1]);
	w_anode3207w[] = ( (w_anode3207w[2..2] & w_data3139w[2..2]), (w_anode3207w[1..1] & (! w_data3139w[1..1])), (w_anode3207w[0..0] & w_data3139w[0..0]), w_anode3141w[1..1]);
	w_anode3217w[] = ( (w_anode3217w[2..2] & w_data3139w[2..2]), (w_anode3217w[1..1] & w_data3139w[1..1]), (w_anode3217w[0..0] & (! w_data3139w[0..0])), w_anode3141w[1..1]);
	w_anode3227w[] = ( (w_anode3227w[2..2] & w_data3139w[2..2]), (w_anode3227w[1..1] & w_data3139w[1..1]), (w_anode3227w[0..0] & w_data3139w[0..0]), w_anode3141w[1..1]);
	w_anode3239w[] = ( (w_anode3239w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3246w[] = ( (w_anode3246w[2..2] & (! w_data3139w[2..2])), (w_anode3246w[1..1] & (! w_data3139w[1..1])), (w_anode3246w[0..0] & (! w_data3139w[0..0])), w_anode3239w[1..1]);
	w_anode3257w[] = ( (w_anode3257w[2..2] & (! w_data3139w[2..2])), (w_anode3257w[1..1] & (! w_data3139w[1..1])), (w_anode3257w[0..0] & w_data3139w[0..0]), w_anode3239w[1..1]);
	w_anode3267w[] = ( (w_anode3267w[2..2] & (! w_data3139w[2..2])), (w_anode3267w[1..1] & w_data3139w[1..1]), (w_anode3267w[0..0] & (! w_data3139w[0..0])), w_anode3239w[1..1]);
	w_anode3277w[] = ( (w_anode3277w[2..2] & (! w_data3139w[2..2])), (w_anode3277w[1..1] & w_data3139w[1..1]), (w_anode3277w[0..0] & w_data3139w[0..0]), w_anode3239w[1..1]);
	w_anode3287w[] = ( (w_anode3287w[2..2] & w_data3139w[2..2]), (w_anode3287w[1..1] & (! w_data3139w[1..1])), (w_anode3287w[0..0] & (! w_data3139w[0..0])), w_anode3239w[1..1]);
	w_anode3297w[] = ( (w_anode3297w[2..2] & w_data3139w[2..2]), (w_anode3297w[1..1] & (! w_data3139w[1..1])), (w_anode3297w[0..0] & w_data3139w[0..0]), w_anode3239w[1..1]);
	w_anode3307w[] = ( (w_anode3307w[2..2] & w_data3139w[2..2]), (w_anode3307w[1..1] & w_data3139w[1..1]), (w_anode3307w[0..0] & (! w_data3139w[0..0])), w_anode3239w[1..1]);
	w_anode3317w[] = ( (w_anode3317w[2..2] & w_data3139w[2..2]), (w_anode3317w[1..1] & w_data3139w[1..1]), (w_anode3317w[0..0] & w_data3139w[0..0]), w_anode3239w[1..1]);
	w_data3139w[2..0] = data_wire[2..0];
END;
--VALID FILE
